services:
  db:
    image: postgres
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
    ports:
      - "5437:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/00_extensions.sql:/docker-entrypoint-initdb.d/00-extensions.sql:ro
      - ./database/01_init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/02_seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend-gateway
    container_name: backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET:-dev-secret-change-me}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      # Redis connection for publishing task stack events
      REDIS_URL: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  pgdata:
