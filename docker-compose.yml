services:
  db:
    image: postgres
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/00_extensions.sql:/docker-entrypoint-initdb.d/00-extensions.sql:ro
      - ./database/01_init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/02_seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend-gateway
    container_name: backend
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-db}
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET:-dev-secret-change-me}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_URL: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  middleware:
    build: ./robotics-middleware
    container_name: middleware
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-db}
      REDIS_URL: redis://redis:6379
      TASK_STACK_STREAM: ${TASK_STACK_STREAM:-task_stacks}
      TASK_STACK_CONSUMER_GROUP: ${TASK_STACK_CONSUMER_GROUP:-robots}
      TASK_STACK_CONSUMER_NAME: ${TASK_STACK_CONSUMER_NAME:-worker-1}
      ROS_ENABLED: ${ROS_ENABLED:-true}
      COMMAND_TOPIC_1: ${COMMAND_TOPIC_1:-/robot_1/commands}
      FEEDBACK_TOPIC_1: ${FEEDBACK_TOPIC_1:-/robot_1/feedback}
      COMMAND_TOPIC_2: ${COMMAND_TOPIC_2:-/robot_2/commands}
      FEEDBACK_TOPIC_2: ${FEEDBACK_TOPIC_2:-/robot_2}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  robot_1:
    image: ros:jazzy-ros-core
    container_name: robot_1
    restart: unless-stopped
    command: ["python3", "/opt/robot_1_node.py"]
    environment:
      - COMMAND_TOPIC_1=${COMMAND_TOPIC_1:-/robot_1/commands}
      - FEEDBACK_TOPIC_1=${FEEDBACK_TOPIC_1:-/robot_1/feedback}
    volumes:
      - ./ros_robots/robot_1_node.py:/opt/robot_1_node.py:ro
    depends_on:
      middleware:
        condition: service_started

  robot_2:
    image: ros:jazzy-ros-core
    container_name: robot_2
    restart: unless-stopped
    command: ["python3", "/opt/robot_2_node.py"]
    environment:
      - COMMAND_TOPIC_2=${COMMAND_TOPIC_2:-/robot_2/commands}
      - FEEDBACK_TOPIC_2=${FEEDBACK_TOPIC_2:-/robot_2/feedback}
    volumes:
      - ./ros_robots/robot_2_node.py:/opt/robot_2_node.py:ro
    depends_on:
      middleware:
        condition: service_started

volumes:
  pgdata:

